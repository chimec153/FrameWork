#pragma once

enum SCENE_CREATE
{
	SC_CURRENT,
	SC_NEXT,
	SC_MINIGAME,
	SC_END
};

enum MOVE_DIR
{
	MD_BACK = -1,
	MD_NONE,
	MD_FRONT
};

enum DIR
{
	LEFT,
	UP,
	RIGHT,
	DOWN
};

enum COLLIDER_TYPE
{
	CT_RECT,
	CT_SPHERE,
	CT_LINE,
	CT_POINT,
	CT_PIXEL,
	CT_END
};

enum COLLISION_STATE
{
	CS_ENTER,
	CS_STAY,
	CS_LEAVE,
	CS_END
};

enum SCENE_CHANGE
{
	SC_NONE,
	SC_CHANGE
};

enum TILE_OPTION
{
	TO_NONE,
	TO_DIRT,
	TO_HOEDIRT,
	TO_WATERDIRT,
	TO_NOMOVE,
	TO_WATER,
	TO_TREEANI,
	TO_END
};

enum TILE_EDIT_MODE
{
	TEM_TEXTURE,
	TEM_OPTION,
	TEM_OBJECT
};

enum OBJ_BLOCK
{
	OB_NONE,
	OB_TREE,
	OB_BUILDING,
	OB_CROP,
	OB_ROCK,
	OB_GRASS,
	OB_FURNITURE,
	OB_END
};

enum ANIMATION_EDIT_MODE
{
	AEM_BODY,
	AEM_HAIR,
	AEM_SHIRT
};

enum PLAYER_ANIMATION_TYPE
{
	PAT_NONE,
	PAT_HAIR,
	PAT_SHIRT
};

enum ITEM_TYPE
{
	IT_NONE,
	IT_SEED,
	IT_TOOL,
	IT_CROP,
	IT_ETC,
	IT_EGG,
	IT_END
};

enum CROP_TYPE
{
	CROP_NONE,
	CROP_PARSNIP,
	CROP_BEAN,
	CROP_CAULIFLOWER,
	CROP_POTATO,
	CROP_GARLIC,
	CROP_KALE,
	CROP_RHUBARD,
	CROP_MELON,
	CROP_TOMATO,
	CROP_BLUEBERRY,
	CROP_PEPPER,
	CROP_WHEAT,
	CROP_RADISH,
	CROP_CABBAGE,
	CROP_STAR,
	CROP_CORN,
	CROP_EGGPLANT,
	CROP_ARTICHOKE,
	CROP_PUMKIN,
	CROP_BOKCHOY,
	CROP_YAM,
	CROP_CRANBERRY,
	CROP_BEET,
	CROP_ANCIENT,
	CROP_TULIP,
	CROP_JAZZ,
	CROP_POPPY,
	CROP_SPANGLE,
	CROP_SUNFLOWER,
	CROP_ROSE,
	CROP_SWEETGEM,
	CROP_STRAWBERRY,
	CROP_HOP,
	CROP_GRAPE,
	CROP_AMARANTH,
	CROP_COFFEE,
	CROP_END
};

enum TOOL_TYPE
{
	TOOL_SWORD,
	TOOL_HOE,
	TOOL_EX,
	TOOL_PIKEX,
	TOOL_WATER,
	TOOL_SCYTHE,
	TOOL_SCISSOR,
	TOOL_END
};

enum PLAYER_ACTION
{
	PA_IDLE,
	PA_WALK,
	PA_ATTACK,
	PA_EAT,
	PA_FARM,
	PA_WATER,
	PA_SMOKE,
	PA_RIDE,
	PA_END
};

enum BRUSH_MODE
{
	BM_PEN,
	BM_RECT,
	BM_END
};

enum ROCK_TYPE
{
	ROCK_NONE,
	ROCK_EMER,
	ROCK_AQUA,
	ROCK_RUBY,
	ROCK_AMET,
	ROCK_TOPA,
	ROCK_JADE,
	ROCK_DIAM,
	ROCK_PRIS,
	ROCK_END,
};

enum STAGE_TYPE
{
	STAGE_INDOOR,
	STAGE_OUTDOOR
};

enum BUILDING_TYPE
{
	BT_BARN = 1,
	BT_COOP,
	BT_SILO = 4,
	BT_STABLE = 8,
	BT_END
};

enum ANIMAL_TYPE
{
	ANIMAL_CHICKEN,
	ANIMAL_MILKCOW,
	ANIMAL_GOAT,
	ANIMAL_DUCK,
	ANIMAL_SHEEP,
	ANIMAL_RABBIT,
	ANIMAL_PIG,
	ANIMAL_BROWNCOW,
	ANIMAL_DINOSAUR,
	ANIMAL_HORSE,
	ANIMAL_END
};

enum DATA_TYPE
{
	DATA_ITEM,
	DATA_ANIMAL,
	DATA_END
};

enum CHICKEN_COLOR
{
	CC_WHITE,
	CC_BROWN,
	CC_BLUE,
	CC_VOID,
	CC_END
};

enum LABELING_TYPE
{
	LT_LABEL,
	LT_OBJECT,
	LT_END
};

enum EGG_TYPE
{
	ET_CHICK,
	ET_DUCK,
	ET_DINO,
	ET_END
};

enum MONSTER_TYPE
{
	MT_BAT,
	MT_SLIME,
	MT_BUG,
	MT_FLY,
	MT_ROCKCRAB,
	MT_END
};

enum MINI_ITEM_TYPE
{
	ITEM_NONE,
	ITEM_COFFEE,
	ITEM_MACHINE,
	ITEM_NUKE,
	ITEM_SHOTGUN,
	ITEM_SMOKE,
	ITEM_BADGE,
	ITEM_TOMB,
	ITEM_WHEEL,
	ITEM_LIFE,
	ITEM_MONEY,
	ITEM_5MONEY,
	ITEM_END
};

enum SEASON
{
	SEASON_SPRING,
	SEASON_SUMMER,
	SEASON_FALL,
	SEASON_WINTER,
	SEASON_END
};

enum MINI_MONSTER_TYPE
{
	MMT_NONE,
	MMT_ORC,
	MMT_MUSHROOM,
	MMT_MUMMY,
	MMT_IMP,
	MMT_ORGE,
	MMT_PIXIE,
	MMT_SPIKEBALL,
	MMT_END
};

enum HAT_TYPE
{
	HT_NONE,
	HT_COWBOY,
	HT_BOWLER,
	HT_TOP,
	HT_SOMBRERO,
	HT_STRAW,
	HT_OFFICIAL,
	HT_BLUE,
	HT_PLUM,
	HT_SKELETON,
	HT_GOBLIN,
	HT_CHICKEN,
	HT_EARMUFFS,
	HT_DELICATE,
	HT_TROPICLIP,
	HT_BUTTERFLY,
	HT_HUNTER,
	HT_TRUCKER,
	HT_SAILOR,
	HT_GOOD,
	HT_END
};

typedef struct _tagItemInfo
{
	string			strName;
	string			strCropName;
	ITEM_TYPE		eItemType;
	CROP_TYPE		eCropType;
	TOOL_TYPE		eToolType;
	POSITION		tTileOffset;
	POSITION		tCropOffset;
	POSITION		tHarvestOffset;
	vector<int>		vecPrice;
	int				iSeedSellPrice;
	int				iSellPrice;
	int				iMaxStage;
	vector<int>		vecMaxDay;
	int				iEnergyRecovery;
	int				iHPRecovery;
	int				iRegrowthDay;
	int				iAttack;
	vector<TCHAR*>	vecComment;
	EGG_TYPE		eEggType;

	_tagItemInfo() :
		eItemType(IT_NONE),
		eCropType(CROP_PARSNIP),
		eToolType(TOOL_SWORD),
		iSeedSellPrice(0),
		iSellPrice(0),
		iMaxStage(0),
		iEnergyRecovery(0),
		iHPRecovery(0),
		iRegrowthDay(0),
		iAttack(0),
		eEggType(ET_CHICK)	
	{

	}

	~_tagItemInfo()
	{
		size_t iSize = vecComment.size();

		for (size_t i = 0; i < iSize; ++i)
			delete[] vecComment[i];
	}

}ITEMINFO, * PITEMINFO;

