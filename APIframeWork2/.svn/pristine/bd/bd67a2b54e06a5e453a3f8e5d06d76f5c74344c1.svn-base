#include "UIClockHand.h"
#include "../Animation/Animation.h"
#include "../Resources/ResourcesManager.h"
#include "../Resources/Texture.h"
#include "Crop.h"

UIClockHand::UIClockHand()	:
	m_fTime(720.f),
	m_pNightPanel(nullptr)
{
	m_bAlphaOn = true;
	m_cAlpha = 255;
}

UIClockHand::UIClockHand(const UIClockHand& clockhand)	:
	UI(clockhand)
{
	m_fTime = clockhand.m_fTime;
	m_pNightPanel = clockhand.m_pNightPanel;
}

UIClockHand::~UIClockHand()
{
	SAFE_RELEASE(m_pNightPanel);
	Safe_Release_VecList(m_CropList);
}

void UIClockHand::AddTime(float fTime)
{
	m_fTime += fTime * 120.f;	//	24 * 60 = 1440

	if (m_fTime >= 1440.f)	//	하루가 지남
	{
		m_fTime = 0.f;

		auto iter = m_CropList.begin();
		auto iterEnd = m_CropList.end();

		for (; iter != iterEnd; ++iter)
		{
			if (!((Crop*)(*iter))->IsStart())
				((Crop*)(*iter))->TimeStart();

			else
				((Crop*)(*iter))->AddDay(1);
		}
	}
}
void UIClockHand::SetNightPanel(Obj* pObj)
{
	SAFE_RELEASE(m_pNightPanel);

	m_pNightPanel = pObj;

	if (m_pNightPanel)
		m_pNightPanel->AddRef();
}

bool UIClockHand::Init()
{
	SetSize(100.f, 100.f);
	m_tOriginPos = m_tPos;

	SetTexture("ClockHand", TEXT("UI\\Arrow"), 13);

	if(m_pTexture)
		m_pTexture->SetColorKeyAll(RGB(255, 255, 255));

	return true;
}

void UIClockHand::Input(float fDeltaTime)
{
	UI::Input(fDeltaTime);
}

int UIClockHand::Update(float fDeltaTime)
{
	UI::Update(fDeltaTime);

	POSITION tPos = {};

	tPos.x = -cosf(-PI / 2.f + (int)(m_fTime / 120.f) * PI / 12.f);
	tPos.y = -sinf(-PI / 2.f + (int)(m_fTime / 120.f) * PI / 12.f);

	tPos.Normalize();

	m_tPos = m_tOriginPos + tPos * 20.f;

	float fHour = m_fTime / 60.f;
	int iAlpha = 0;

	if (fHour <= 4.5f || fHour >= 19.5f)
		iAlpha = 120;

	else if (fHour < 7.5f && fHour > 4.5f)
		iAlpha = (int)(-40.f * fHour + 300.f);

	else if (fHour > 16.5f && fHour < 19.5f)
		iAlpha = (int)(-660.f + 40.f * fHour);

	m_pNightPanel->SetAlpha(iAlpha);

	return 0;
}

int UIClockHand::LateUpdate(float fDeltaTime)
{
	UI::LateUpdate(fDeltaTime);
	return 0;
}

void UIClockHand::Collision(float fDeltaTime)
{
	UI::Collision(fDeltaTime);
}

void UIClockHand::Render(HDC hDC, float fDeltaTime)
{
	if (m_pTexture)
		m_pTexture->RenderByAlpha(m_cAlpha, hDC, m_tPos, POSITION::Zero, m_tSize, 12 - (int)(m_fTime/120.f));
}

UIClockHand* UIClockHand::Clone()
{
	return new UIClockHand(*this);
}
