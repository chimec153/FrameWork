#pragma once
#include "../game.h"

typedef struct _tagItemInfo
{
	string			strName;
	string			strCropName;
	ITEM_TYPE		eItemType;
	CROP_TYPE		eCropType;
	POSITION		tTileOffset;
	POSITION		tCropOffset;
	POSITION		tHarvestOffset;
	vector<int>		vecPrice;
	int				iSeedSellPrice;
	int				iSellPrice;
	int				iMaxStage;
	vector<int>		vecMaxDay;
	int				iEnergyRecovery;
	int				iHPRecovery;
	int				iRegrowthDay;

}ITEMINFO, *PITEMINFO;

class ResourcesManager
{
private:
	unordered_map<string, class Texture*>	m_mapTexture;
	vector<PITEMINFO>						m_vecItemInfo;
	int										m_iItemCount;
	HINSTANCE								m_hInst;
	HDC										m_hDC;
	class Texture*							m_pBackBuffer;

public:
	int GetItemCount()	const
	{
		return m_iItemCount;
	}

public:
	class Texture* GetBackBuffer() const;
	bool Init(HINSTANCE hInst,HDC hDC);
	class Texture* LoadTexture(const string& strKey,
		const wchar_t* pFileName,
		const string& strPathKey = TEXTURE_PATH);
	class Texture* LoadTexture(const string& strKey,
		const vector<const TCHAR*>& vecFileName,
		const string& strPathKey = TEXTURE_PATH);
	class Texture* LoadTexture(const string& strKey,
		const TCHAR* pFileName,
		int iCount,	const string& strPathKey = TEXTURE_PATH);
	class Texture* LoadTextureFromFullPath(const string& strKey,
		const wchar_t* pFileName);
	class Texture* LoadTexture(FILE* pFile);
	class Texture* FindTexture(const string& strKey);
	bool EraseTexture(const string& strKey);

public:
	bool LoadItemInfo(const TCHAR* pFileName, const string& strPathKey = DATA_PATH);
	PITEMINFO FindItemInfo(int iIndex);

	DECLARE_SINGLE(ResourcesManager)
};