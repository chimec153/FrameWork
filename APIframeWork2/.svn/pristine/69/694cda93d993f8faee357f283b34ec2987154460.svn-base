#include "SceneManager.h"
#include "InGameScene.h"
#include "StartScene.h"
#include "SceneShop.h"
#include "../Collider/CollisionManager.h"
#include "..//Object/UIPanel.h"
#include "../Object/ObjManager.h"
#include "../Object/Player.h"
#include "../Object/Stage.h"
#include "../Core/Camera.h"
#include "../Object/UIInventory.h"
#include "../Object/UIClockHand.h"

DEFINITION_SINGLE(SceneManager)

SceneManager::SceneManager()	:
	m_pScene(NULL),
	m_pNextScene(NULL)
{
}

SceneManager::~SceneManager()
{
	SAFE_DELETE_MAP(m_mapScene);
}

bool SceneManager::Init()
{
	m_pScene = CreateScene<StartScene>("Start", SC_CURRENT);

	return true;
}

void SceneManager::Input(float fDeltaTime)
{
	m_pScene->Input(fDeltaTime);
}

SCENE_CHANGE SceneManager::Update(float fDeltaTime)
{
	m_pScene->Update(fDeltaTime);
	return ChangeScene();
}

SCENE_CHANGE SceneManager::LateUpdate(float fDeltaTime)
{
	m_pScene->LateUpdate(fDeltaTime);
	return ChangeScene();
}

void SceneManager::Collision(float fDeltaTime)
{
	m_pScene->Collision(fDeltaTime);
}

void SceneManager::Render(HDC hDC, float fDeltaTime)
{
	m_pScene->Render(hDC, fDeltaTime);
}

SCENE_CHANGE SceneManager::ChangeScene()
{
	if (m_pNextScene)
	{
		m_pScene = m_pNextScene;
		m_pNextScene = NULL;

		GET_SINGLE(CollisionManager)->Clear();

		m_pScene->SetSceneType(SC_CURRENT);

		//Scene::ChangePrototype();
		Layer* pLayer = m_pScene->FindLayer("Default");
		Layer* pHUDLayer = m_pScene->FindLayer("HUD");
		Layer* pUILayer = m_pScene->FindLayer("UI");

		Player* pPlayer = (Player*)GET_SINGLE(ObjManager)->GetPlayer();
		UIInventory* pInven = GET_SINGLE(ObjManager)->GetInven();
		UIClockHand* pClockHand = (UIClockHand*)GET_SINGLE(ObjManager)->GetClockHand();

		pClockHand->SetScene(m_pScene);
		pClockHand->SetLayer(pLayer);

		pInven->AddItemToLayer(pHUDLayer);
		pInven->AddInfoPanelToLayer(pUILayer);
		pInven->SetScene(m_pScene);
		pInven->SetLayer(pLayer);

		pPlayer->SetScene(m_pScene);
		pPlayer->SetLayer(pLayer);
		pPlayer->SetBarLayer(pUILayer);

		Stage* pStage = m_pScene->GetStage();

		int iNumX = pStage->GetTileNumX();
		int iNumY = pStage->GetTileNumY();

		int iSizeX = pStage->GetTileSizeX();
		int iSizeY = pStage->GetTileSizeY();

		GET_SINGLE(Camera)->SetWorldResolution(iNumX * iSizeX, iNumY * iSizeY);

		SAFE_RELEASE(pPlayer);
		SAFE_RELEASE(pInven);

		return SC_CHANGE;
	}

	return SC_NONE;
}
